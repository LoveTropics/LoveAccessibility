buildscript {
  repositories {
    maven { url = 'https://maven.minecraftforge.net' }
    maven { url = 'https://repo.spongepowered.org/maven' }
    mavenCentral()
  }
  dependencies {
    classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
  }
}

plugins {
  id 'net.minecraftforge.gradle' version '[6.0,6.2)'
  id 'com.github.johnrengelman.shadow' version '8.1.1'
  id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'

group = "com.lovetropics"
archivesBaseName = "love-accessibility"

ext.buildnumber = 0

if (System.getenv('GITHUB_RUN_NUMBER')) {
    project.buildnumber = System.getenv('GITHUB_RUN_NUMBER')
    version = "${mod_version}+${buildnumber}-gha"
} else {
    version = "${mod_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
  mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
  runs {
    client {
      workingDirectory project.file('run')
      property 'forge.logging.console.level', 'info'
      arg "-mixin.config=love_accessibility.mixins.json"
      jvmArg '-Dmixin.env.disableRefMap=true'
      mods {
        love_accessibility {
          sources sourceSets.main
        }
      }
    }
    server {
      workingDirectory project.file('run')
      property 'forge.logging.console.level', 'info'
      arg "-mixin.config=love_accessibility.mixins.json"
      jvmArg '-Dmixin.env.disableRefMap=true'
      mods {
        love_accessibility {
          sources sourceSets.main
        }
      }
    }
  }
}

configurations {
  shade
  library
  implementation.extendsFrom library
}

repositories {
  maven { url = 'https://maven.gegy.dev' }
}

dependencies {
  minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

  final def nvda_controller = 'dev.gegy:nvda-controller-client-java:1.0.0'
  library nvda_controller
  shade(nvda_controller) {
    transitive = false
  }

  if (System.getProperty("idea.sync.active") != "true") {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
  }
}

minecraft.runs.all {
  lazyToken('minecraft_classpath') {
    configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
  }
}

mixin {
  add sourceSets.main, "love_accessibility.refmap.json"
}

shadowJar {
  configurations = [project.configurations.shade]
  archiveClassifier.set('')
}

reobf {
  shadowJar {}
}

build.dependsOn shadowJar
build.dependsOn reobfShadowJar

jar {
  archiveClassifier = 'slim'
  manifest {
    attributes([
        "Specification-Title"     : "love-accessibility",
        "Specification-Vendor"    : "lovetropics",
        "Specification-Version"   : "1",
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : "${version}",
        "Implementation-Vendor"   : "lovetropics",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        "MixinConfigs"            : "love_accessibility.mixins.json"
    ])
  }
}
